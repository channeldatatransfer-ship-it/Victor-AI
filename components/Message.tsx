import React from 'react';
import { Message, Role } from '../types';
import { VictorIcon, UserIcon, SpeakerOnIcon, SpeakerOffIcon } from './IconComponents';
import SourcePill from './SourcePill';

interface MessageProps {
  message: Message;
  onToggleTTS: (message: Message) => void;
  isSpeaking: boolean;
}

const MessageComponent: React.FC<MessageProps> = ({ message, onToggleTTS, isSpeaking }) => {
  const isModel = message.role === Role.MODEL;
  const isError = message.role === Role.ERROR;

  const wrapperClasses = `flex items-start gap-4 my-4 ${
    isModel || isError ? 'justify-start' : 'justify-end'
  }`;
  
  const bubbleClasses = `max-w-xl p-4 rounded-xl shadow-lg ${
    isModel
      ? 'bg-gray-900/80 border border-cyan-500/20 text-cyan-50'
      : isError
      ? 'bg-red-900/80 border border-red-500/30 text-red-100'
      : 'bg-cyan-600/90 text-white'
  }`;
  
  const contentClasses = "whitespace-pre-wrap leading-relaxed";

  const renderIcon = () => {
    if (isModel || isError) {
      return (
        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center border border-cyan-500/30 shadow-[0_0_10px_rgba(0,255,255,0.2)]">
          <VictorIcon />
        </div>
      );
    }
    return (
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center border border-cyan-500/30">
        <UserIcon />
      </div>
    );
  };

  return (
    <div className={wrapperClasses}>
      {(isModel || isError) && renderIcon()}
      <div className="flex flex-col">
        <div className="flex items-start gap-2">
          <div className={bubbleClasses}>
              {message.imageUrl && (
                <div className="mb-4">
                  <img
                    src={message.imageUrl}
                    alt="Generated by Victor"
                    className="rounded-lg shadow-lg max-w-full h-auto"
                  />
                </div>
              )}
              <p className={contentClasses}>{message.content}</p>
          </div>
          {isModel && message.content && (
            <button
              onClick={() => onToggleTTS(message)}
              className="flex-shrink-0 mt-2 p-2 rounded-full text-cyan-400 hover:bg-cyan-500/20 transition-colors"
              aria-label={isSpeaking ? "Stop speaking" : "Read aloud"}
            >
              {isSpeaking ? <SpeakerOnIcon /> : <SpeakerOffIcon />}
            </button>
          )}
        </div>
        {message.sources && message.sources.length > 0 && (
          <div className="mt-3">
            <h4 className="text-cyan-400 text-xs font-semibold mb-2">Sources:</h4>
            <div className="flex flex-wrap">
              {message.sources.map((source, index) => (
                <SourcePill key={index} source={source} />
              ))}
            </div>
          </div>
        )}
      </div>
      {message.role === Role.USER && renderIcon()}
    </div>
  );
};

export default MessageComponent;